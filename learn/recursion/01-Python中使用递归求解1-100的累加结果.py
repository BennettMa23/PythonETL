'''
sum = 1 + 2 + 3 + ... + 98 + 99 + 100
# 使用循环求解1-100累加的结果
sum = 0
for i in range(1, 101):
    sum += i
print(sum)  # 5050
# 使用递归求解1-100累加的结果
递归函数：把一个大问题，拆解为若干个结构相同或相似的想问题，然后从小到大依次求解 => 程序设计思想
大问题：求解1-100累加结果
sum = 1 + 2 + 3 + ... + 98 + 99 + 100
拆解为若干个结构相同或相似小问题
f(100) = 1 + 2 + 3 + ... + 98 + 99 + 100
f(99) = 1 + 2 + 3 + ... + 98 + 99
f(N) = ???
...
f(3) = 1 + 2 + 3
f(2) = 1 + 2
f(1) = 1
递归函数设计三要数：
① 明确这个函数要求什么 => func(100)累加结果
② 寻找递归出口 => 什么情况下，要结束这个递归 => 要求的最终结果，如果参数等于1的时候，结果返回为1，终止递归
③ 寻找与递归等价关系式 => func(N) = func(N-1) + N
递归：有递有归
递：把一个大问题拆解为若干个结构相同或相似的小问题
归：把最小问题答案求解出来，然后反推回到最大的问题得出最终答案

小结：所谓的递归就是函数自己调用自己一种程序设计思想，其本质就是把一个大问题拆解为若干个结构相同或相似的小问题，从而从最小问题依次求解，从而得出大问题答案的一种程序设计思想。
'''
# 第一步：明确函数要求什么 => 求1-100累加的结果
def func(n):
    # 第二步：寻找递归出口
    if n == 1:
        return 1
    # 第三步：寻找与递归等价关系式
    return func(n-1) + n

print(func(100))